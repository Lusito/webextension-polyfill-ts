{
  "functions.%getBackgroundPage.parameters.%callback.parameters.%backgroundPage.optional": false,
  "functions.%getManifest.returns": {
    "$ref": "Manifest.WebExtensionManifest",
    "description": "The manifest details."
  },
  "functions.%connect.parameters.%extensionId.skipableParameter": true,
  "types.$Port.properties.error": {
    "type": "object",
    "description": "If the port was disconnected due to an error, this will be set to an object with a string property message, giving you more information about the error. See onDisconnect.",
    "optional": true,
    "properties": {
      "message": {"type": "string"}
    }
  },
  "types.$Port.properties.onDisconnect": {
    "isEvent": true,
    "name": "onDisconnect",
    "type": "function",
    "description": "",
    "parameters": [
      {
        "$ref": "Port",
        "name": "port"
      }
    ]
  },
  "types.$Port.properties.onMessage": {
    "isEvent": true,
    "name": "onMessage",
    "type": "function",
    "description": "",
    "parameters": [
      {
        "name": "message",
        "type": "any"
      },
      {
        "$ref": "Port",
        "name": "port"
      }
    ]
  },
  "types.$Port.properties.postMessage": {
    "name": "postMessage",
    "type": "function",
    "description": "Send a message to the other end. This takes one argument, which is a JSON object representing the message to send. It will be delivered to any script listening to the port's onMessage event, or to the native application if this port is connected to a native application.",
    "parameters": [
      {
        "name": "message",
        "type": "any"
      }
    ]
  },
  "events.%onMessage.parameters.%sendResponse.description": "Function to call (at most once) when you have a response. This is an alternative to returning a Promise. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called).",
  "events.%onMessage.parameters.%sendResponse.parameters": [
    { "type": "any", "name": "message" }
  ],
  "events.%onMessage.returns": {
    "type": "Promise<any> | true",
    "optional": true,
    "description": "Return a <code>Promise</code> from the listener function and resolve the promise when the response is ready. Alternatively, return true and call sendResponse."
  },
  "events.%onMessageExternal.parameters.%sendResponse.description": "Function to call (at most once) when you have a response. This is an alternative to returning a Promise. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called).",
  "events.%onMessageExternal.parameters.%sendResponse.parameters": [
    { "type": "any", "name": "message" }
  ],
  "events.%onMessageExternal.returns": {
    "type": "Promise<any> | true",
    "optional": true,
    "description": "Return a <code>Promise</code> from the listener function and resolve the promise when the response is ready. Alternatively, return true and call sendResponse."
  }
}
